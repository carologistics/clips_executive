(deffunction create-action-param-string (?params)
    (bind ?size (length$ ?params))
    (bind ?param-string "")
    (loop-for-count (?i 1 ?size)
        (if (eq (mod ?i 2) 1) then
            (bind ?param-string (str-cat ?param-string (nth$ ?i ?params) "|"))
        else
            (bind ?param-string (str-cat ?param-string (nth$ ?i ?params) "#"))
        )
    )
    (return ?param-string)
)

(deffunction create-slot-value-string (?values)
    (bind ?size (length$ ?values))
    (bind ?value-string "")
    (loop-for-count (?i 1 ?size)
        (bind ?value-string (str-cat ?value-string (nth$ ?i ?values)))
        (if (neq ?i ?size) then
            (bind ?value-string (str-cat ?value-string "#"))
        )
    )
    (return ?value-string)
)

(deffunction rl-generate-observations () )

(deffunction rl-delete-observations ()
    (do-for-all-facts ((?ob rl-observation))
            TRUE
        (retract ?ob)
    )
)

(deffunction create-observation-string ()
    (printout info "Generating environment state string" crlf)
    (rl-generate-observations)
    (bind ?state-string "{")
    (do-for-all-facts ((?ob rl-observation))
            TRUE
        (bind ?fact-string (str-cat "\"" ?ob:name "(" (create-slot-value-string ?ob:param-values) ")\","))
        (bind ?state-string (str-cat ?state-string ?fact-string))
    )
    (bind ?state-string (str-cat (sub-string 1 (- (str-length ?state-string) 1) ?state-string) "}"))
    (rl-delete-observations)
    (return ?state-string)
)

(defrule all-services-actions-created
    (not (saved-facts))
    (cx-rl-interfaces-set-rl-mode-service)
    (cx-rl-interfaces-create-rl-env-state-service)
    (cx-rl-interfaces-exec-action-selection-client)
    (cx-rl-interfaces-get-observable-objects-service)
    (cx-rl-interfaces-get-observable-predicates-service)
    (cx-rl-interfaces-get-predefined-observables-service)
    (cx-rl-interfaces-get-action-list-robot-service)
    (cx-rl-interfaces-get-action-list-service)
    (cx-rl-interfaces-get-free-robot-server)
    (cx-rl-interfaces-action-selection-server)
    (cx-rl-interfaces-reset-cx-server)
=>
    (assert (saved-facts))
    (save-facts reset-save)
)