/***************************************************************************
 *  {{name_camel}}.cpp
 *
 *  Created: {{ gen_date }}
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL file in the doc directory.
 */

#include <map>
#include <memory>
#include <string>

#include "cx_core/ClipsFeature.hpp"
#include "{{include_path_prefix}}/{{name_camel}}.hpp"
#include "cx_utils/LockSharedPtr.hpp"

// To export as plugin
#include "pluginlib/class_list_macros.hpp"

using std::placeholders::_1;

namespace cx {

{{name_camel}}::{{name_camel}}()
    : Node("ros_topic_feature_node") {}
{{name_camel}}::~{{name_camel}}() {}

std::string {{name_camel}}::getFeatureName() const {
  return clips_feature_name;
}

void {{name_camel}}::initialise(const std::string &feature_name) {
  clips_feature_name = feature_name;

  spin_thread_ =
      std::thread([this]() { rclcpp::spin(this->get_node_base_interface()); });
}

bool {{name_camel}}::clips_context_init(
    const std::string &env_name, LockSharedPtr<clips::Environment> &clips) {
  RCLCPP_INFO(rclcpp::get_logger(clips_feature_name),
              "Initialising context for feature %s",
              clips_feature_name.c_str());

  envs_[env_name] = clips;

  // add functions for subscribing and unsubscribing to the clips environment
  clips::AddUDF(
    clips.get_obj().get(), "{{name_camel}}-subscribe", "v", 1, 1, ";s",
    [](clips::Environment *env, clips::UDFContext *udfc, clips::UDFValue * /*out*/) {
        auto *instance = static_cast<{{name_camel}} *>(udfc->context);
        clips::UDFValue topic;

        using namespace clips;
        clips::UDFNthArgument(udfc, 1, LEXEME_BITS, &topic);
        instance->subscribe_to_topic(env,topic.lexemeValue->contents);
    },
    "subscribe_to_topic", this);

  clips::AddUDF(
    clips.get_obj().get(), "{{name_camel}}-unsubscribe", "v", 1, 1, ";s",
    [](clips::Environment *env, clips::UDFContext *udfc, clips::UDFValue * /*out*/) {
        auto *instance = static_cast<{{name_camel}} *>(udfc->context);
        clips::UDFValue topic;

        using namespace clips;
        clips::UDFNthArgument(udfc, 1, LEXEME_BITS, &topic);
        instance->unsubscribe_from_topic(env, topic.lexemeValue->contents);
    },
    "unsubscribe_from_topic", this);


  // add fact templates
  clips::Build(clips.get_obj().get(),"(deftemplate {{name_camel}}-subscribed \
            (slot topic (type STRING)))");
  clips::Build(clips.get_obj().get(),"(deftemplate {{name_camel}}-message \
            (slot topic (type STRING)) \
            {%- for slot in slots %}
            (slot {{ slot.name }} (type {{slot.clips_type}})) \
            {%- endfor %}
            )");

  return true;
}

bool {{name_camel}}::clips_context_destroyed(
    const std::string &env_name) {

  RCLCPP_INFO(rclcpp::get_logger(clips_feature_name),
              "Destroying clips context!");
  clips::RemoveUDF(envs_[env_name].get_obj().get(), "{{name_camel}}-subscribe");
  clips::RemoveUDF(envs_[env_name].get_obj().get(), "{{name_camel}}-unsubscribe");
  envs_.erase(env_name);

  return true;
}

void {{name_camel}}::subscribe_to_topic(clips::Environment *env,
    const std::string &topic_name) {
  RCLCPP_INFO(rclcpp::get_logger(clips_feature_name), "Subscribing to topic %s",
              topic_name.c_str());
  bool found_env = false;
  std::string env_name;

  for (auto &entry : envs_) {
    if (entry.second.get_obj().get() == env) {
      env_name = entry.first;
      found_env = true;
      break;
    }
  }
  if (!found_env) {
    RCLCPP_ERROR(rclcpp::get_logger(clips_feature_name),
                 "Unable to determine environment from raw pointer");
    return;
  }

  auto it = subscriptions_[env_name].find(topic_name);

  if (it != subscriptions_[env_name].end()) {
    RCLCPP_INFO(rclcpp::get_logger(clips_feature_name),
                "Already subscribed to topic %s", topic_name.c_str());
  } else {
    RCLCPP_INFO(rclcpp::get_logger(clips_feature_name),
                "Creating subscription to topic %s", topic_name.c_str());
    subscriptions_[env_name][topic_name] =
        this->create_subscription<{{message_type}}>(
            topic_name, 10, [=](const {{message_type}}::SharedPtr msg) {
              topic_callback(msg, topic_name, env_name);
            });
    clips::AssertString(envs_[env_name].get_obj().get(), ("({{name_camel}}-subscribed (topic \"" +
                                 topic_name + "\"))").c_str());
  }
}

void {{name_camel}}::unsubscribe_from_topic(clips::Environment *env,
    const std::string &topic_name) {
  bool found_env = false;
  std::string env_name;

  for (auto &entry : envs_) {
    if (entry.second.get_obj().get() == env) {
      env_name = entry.first;
      found_env = true;
      break;
    }
  }
  if (!found_env) {
    RCLCPP_ERROR(rclcpp::get_logger(clips_feature_name),
                 "Unable to determine environment from raw pointer");
    return;
  }

  auto it = subscriptions_[env_name].find(topic_name);

  if (it != subscriptions_[env_name].end()) {
    RCLCPP_INFO(rclcpp::get_logger(clips_feature_name),
                "Unsubscribing from topic %s", topic_name.c_str());
    subscriptions_[env_name].erase(topic_name);
  }

  // remove old message facts
  clips::Eval(env, ("(do-for-all-facts ((?f {{name_camel}}-message)) (eq (str-cat ?f:topic) (str-cat " + topic_name + "))  (retract ?f))").c_str(), NULL);
}

void {{name_camel}}::topic_callback(
    const {{message_type}}::SharedPtr msg, std::string topic_name,
    std::string env_name) {
  cx::LockSharedPtr<clips::Environment> &clips = envs_[env_name];
  std::lock_guard<std::mutex> guard(*(clips.get_mutex_instance()));

  // remove old message facts
  clips::Eval(clips.get_obj().get(), ("(do-for-all-facts ((?f {{name_camel}}-message)) (eq (str-cat ?f:topic) (str-cat " + topic_name + "))  (retract ?f))").c_str(), NULL);

  // assert the newest message
  clips::FactBuilder *fact_builder = clips::CreateFactBuilder(clips.get_obj().get(), "{{name_camel}}-message");
  {%- for slot in slots %}
{% if slot.array %}
  std::string values_{{slot.name}};
  for (auto &item : msg->{{ slot.name }}) {
    values_{{slot.name}} += " " + std::to_string(item);
  }
  clips::FBPutSlotMultifield(fact_builder,"{{ slot.name }}", clips::StringToMultifield(clips.get_obj().get(), values_{{slot.name}}.c_str()));
{%- else %}
  clips::FBPutSlotString(fact_builder,"{{ slot.name }}",std::to_string(msg->{{ slot.name }}).c_str());
    {%- endif -%}
{%- endfor %}

  clips::FBPutSlotString(fact_builder,"topic",topic_name.c_str());
  clips::FBAssert(fact_builder);
  clips::FBDispose(fact_builder);
}

} // namespace cx
PLUGINLIB_EXPORT_CLASS(cx::{{name_camel}}, cx::ClipsFeature)
