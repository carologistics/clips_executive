<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classcx_1_1LockSharedPtr" kind="class" language="C++" prot="public">
    <compoundname>cx::LockSharedPtr</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcx_1_1LockSharedPtr_1a50bdc116e1da191f87b44f64d248f997" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; T &gt;</type>
        <definition>std::shared_ptr&lt;T&gt; cx::LockSharedPtr&lt; T &gt;::obj</definition>
        <argsstring></argsstring>
        <name>obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="45" column="19" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcx_1_1LockSharedPtr_1ae0776d89704bbff1e6978e9b35cde692" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; std::mutex &gt;</type>
        <definition>std::shared_ptr&lt;std::mutex&gt; cx::LockSharedPtr&lt; T &gt;::objmutex</definition>
        <argsstring></argsstring>
        <name>objmutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="46" column="27" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcx_1_1LockSharedPtr_1ad549a434b9411a0d6c8c328346356a3b" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int cx::LockSharedPtr&lt; T &gt;::numbers</definition>
        <argsstring></argsstring>
        <name>numbers</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="47" column="14" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a855e4e22e7a209c542f27dbb373ee683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cx::LockSharedPtr&lt; T &gt;::LockSharedPtr</definition>
        <argsstring>()</argsstring>
        <name>LockSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="28" column="3" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a3cdde160202e567d01e6f8600b185b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cx::LockSharedPtr&lt; T &gt;::~LockSharedPtr</definition>
        <argsstring>()</argsstring>
        <name>~LockSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="29" column="3" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a978aeabfc8b050cde64120adf481097a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cx::LockSharedPtr&lt; T &gt;::LockSharedPtr</definition>
        <argsstring>(std::shared_ptr&lt; T &gt; &amp;&amp;ptr)</argsstring>
        <name>LockSharedPtr</name>
        <param>
          <type>std::shared_ptr&lt; T &gt; &amp;&amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="30" column="3" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1ae25951a3c86fa26b4332ced338c43cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cx::LockSharedPtr&lt; T &gt;::LockSharedPtr</definition>
        <argsstring>(const LockSharedPtr&lt; T &gt; &amp;other)</argsstring>
        <name>LockSharedPtr</name>
        <param>
          <type>const <ref refid="classcx_1_1LockSharedPtr" kindref="compound">LockSharedPtr</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="31" column="3" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a2b159030bdc4cf6db60a7f9805b09a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cx::LockSharedPtr&lt; T &gt;::LockSharedPtr</definition>
        <argsstring>(LockSharedPtr&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>LockSharedPtr</name>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">LockSharedPtr</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="32" column="3" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a673c94965ae58a70a4a2b99df572baeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">LockSharedPtr</ref>&lt; T &gt; &amp;</type>
        <definition>LockSharedPtr&lt; T &gt; &amp; cx::LockSharedPtr&lt; T &gt;::operator=</definition>
        <argsstring>(LockSharedPtr&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">LockSharedPtr</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="33" column="17" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a7b827ecef8aab7aa6114bcd9c16b99b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">LockSharedPtr</ref>&lt; T &gt; &amp;</type>
        <definition>LockSharedPtr&lt; T &gt; &amp; cx::LockSharedPtr&lt; T &gt;::operator=</definition>
        <argsstring>(const LockSharedPtr&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcx_1_1LockSharedPtr" kindref="compound">LockSharedPtr</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="34" column="17" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1af04ac9428dff30c22056025d1f5f9578" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; T &gt;</type>
        <definition>std::shared_ptr&lt; T &gt; cx::LockSharedPtr&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dereferencing. Usage:refptr-&gt;memberfun() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="36" column="19" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a94b751ca94f15ff85d69721283216f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cx::LockSharedPtr&lt; T &gt;::init_mutex</definition>
        <argsstring>()</argsstring>
        <name>init_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="37" column="8" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a000fc6d328cb59384cb1329edb243bec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cx::LockSharedPtr&lt; T &gt;::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="38" column="3" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a1f45ebfbad1fde537741386715a0da33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::mutex *</type>
        <definition>std::mutex * cx::LockSharedPtr&lt; T &gt;::get_mutex_instance</definition>
        <argsstring>()</argsstring>
        <name>get_mutex_instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="39" column="14" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1a5c5703b81ede8b98f61d6b07f39d823c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; T &gt;</type>
        <definition>std::shared_ptr&lt; T &gt; cx::LockSharedPtr&lt; T &gt;::get_obj</definition>
        <argsstring>()</argsstring>
        <name>get_obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="40" column="19" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classcx_1_1LockSharedPtr_1af0c33b42083d75eaeacc130eaa84944f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cx::LockSharedPtr&lt; T &gt;::set_obj</definition>
        <argsstring>(std::shared_ptr&lt; T &gt; new_obj)</argsstring>
        <name>set_obj</name>
        <param>
          <type>std::shared_ptr&lt; T &gt;</type>
          <declname>new_obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/lock_shared_ptr.hpp" line="41" column="8" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="132" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/cx_utils/lock_shared_ptr.hpp" line="26" column="12" bodyfile="include/cx_utils/lock_shared_ptr.hpp" bodystart="26" bodyend="48"/>
    <listofallmembers>
      <member refid="classcx_1_1LockSharedPtr_1a1f45ebfbad1fde537741386715a0da33" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>get_mutex_instance</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a5c5703b81ede8b98f61d6b07f39d823c" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>get_obj</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a94b751ca94f15ff85d69721283216f9d" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>init_mutex</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a855e4e22e7a209c542f27dbb373ee683" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>LockSharedPtr</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a978aeabfc8b050cde64120adf481097a" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>LockSharedPtr</name></member>
      <member refid="classcx_1_1LockSharedPtr_1ae25951a3c86fa26b4332ced338c43cd1" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>LockSharedPtr</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a2b159030bdc4cf6db60a7f9805b09a43" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>LockSharedPtr</name></member>
      <member refid="classcx_1_1LockSharedPtr_1ad549a434b9411a0d6c8c328346356a3b" prot="private" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>numbers</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a50bdc116e1da191f87b44f64d248f997" prot="private" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>obj</name></member>
      <member refid="classcx_1_1LockSharedPtr_1ae0776d89704bbff1e6978e9b35cde692" prot="private" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>objmutex</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a000fc6d328cb59384cb1329edb243bec" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>operator bool</name></member>
      <member refid="classcx_1_1LockSharedPtr_1af04ac9428dff30c22056025d1f5f9578" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>operator-&gt;</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a673c94965ae58a70a4a2b99df572baeb" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>operator=</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a7b827ecef8aab7aa6114bcd9c16b99b5" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>operator=</name></member>
      <member refid="classcx_1_1LockSharedPtr_1af0c33b42083d75eaeacc130eaa84944f" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>set_obj</name></member>
      <member refid="classcx_1_1LockSharedPtr_1a3cdde160202e567d01e6f8600b185b90" prot="public" virt="non-virtual"><scope>cx::LockSharedPtr</scope><name>~LockSharedPtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
