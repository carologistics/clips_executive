<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacecx_1_1cx__utils" kind="namespace" language="C++">
    <compoundname>cx::cx_utils</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="param__utils_8hpp_1a4283b7b92aee51add4e373d310ce452c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NodeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">void</ref></type>
        <definition>void cx::cx_utils::declare_parameter_if_not_declared</definition>
        <argsstring>(NodeT node, const std::string &amp;param_name, const rclcpp::ParameterValue &amp;default_value, const rcl_interfaces::msg::ParameterDescriptor &amp;parameter_descriptor=rcl_interfaces::msg::ParameterDescriptor())</argsstring>
        <name>declare_parameter_if_not_declared</name>
        <qualifiedname>cx::cx_utils::declare_parameter_if_not_declared</qualifiedname>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">NodeT</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> std::string &amp;</type>
          <declname>param_name</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> rclcpp::ParameterValue &amp;</type>
          <declname>default_value</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> rcl_interfaces::msg::ParameterDescriptor &amp;</type>
          <declname>parameter_descriptor</declname>
          <defval>rcl_interfaces::msg::ParameterDescriptor()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declares static ROS2 parameter and sets it to a given value if it was not already declared </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/param_utils.hpp" line="33" column="6" bodyfile="include/cx_utils/param_utils.hpp" bodystart="33" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1adf03e5f479e0a6f4abff9559f2bf12c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NodeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">void</ref></type>
        <definition>void cx::cx_utils::declare_parameter_if_not_declared</definition>
        <argsstring>(NodeT node, const std::string &amp;param_name, const rclcpp::ParameterType &amp;param_type, const rcl_interfaces::msg::ParameterDescriptor &amp;parameter_descriptor=rcl_interfaces::msg::ParameterDescriptor())</argsstring>
        <name>declare_parameter_if_not_declared</name>
        <qualifiedname>cx::cx_utils::declare_parameter_if_not_declared</qualifiedname>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">NodeT</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> std::string &amp;</type>
          <declname>param_name</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> rclcpp::ParameterType &amp;</type>
          <declname>param_type</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> rcl_interfaces::msg::ParameterDescriptor &amp;</type>
          <declname>parameter_descriptor</declname>
          <defval>rcl_interfaces::msg::ParameterDescriptor()</defval>
        </param>
        <briefdescription>
<para>Declares ROS2 parameter and sets it to a given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/param_utils.hpp" line="55" column="6" bodyfile="include/cx_utils/param_utils.hpp" bodystart="55" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1a805faf751e867e8ee0b69fdf6472ea7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NodeT</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string cx::cx_utils::get_plugin_type_param</definition>
        <argsstring>(NodeT node, const std::string &amp;plugin_name)</argsstring>
        <name>get_plugin_type_param</name>
        <qualifiedname>cx::cx_utils::get_plugin_type_param</qualifiedname>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">NodeT</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> std::string &amp;</type>
          <declname>plugin_name</declname>
        </param>
        <briefdescription>
<para>Gets the type of plugin for the selected node and its plugin. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets the type of plugin for the selected node and its plugin. Actually seeks for the value of &quot;&lt;plugin_name&gt;.plugin&quot; parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">plugin_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of plugin the type of which is being searched for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing the type of plugin (the value of &quot;&lt;plugin_name&gt;.plugin&quot; parameter) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/param_utils.hpp" line="78" column="13" bodyfile="include/cx_utils/param_utils.hpp" bodystart="78" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1ad7831d222c35339ea9ba003b800cf891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">void</ref></type>
        <definition>void cx::cx_utils::resolve_files</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;files_in, const std::vector&lt; std::string &gt; &amp;share_dirs, std::vector&lt; std::string &gt; &amp;files_out)</argsstring>
        <name>resolve_files</name>
        <qualifiedname>cx::cx_utils::resolve_files</qualifiedname>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> std::vector&lt; std::string &gt; &amp;</type>
          <declname>files_in</declname>
        </param>
        <param>
          <type><ref refid="classcx_1_1LockSharedPtr" kindref="compound">const</ref> std::vector&lt; std::string &gt; &amp;</type>
          <declname>share_dirs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>files_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/cx_utils/param_utils.hpp" line="98" column="6" declfile="include/cx_utils/param_utils.hpp" declline="98" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/cx_utils/param_utils.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
