
.. _program_listing_file_include_cx_plugin_clips_plugin.hpp:

Program Listing for File clips_plugin.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_cx_plugin_clips_plugin.hpp>` (``include/cx_plugin/clips_plugin.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright (c) 2024-2025 Carologistics
   // SPDX-License-Identifier: Apache-2.0
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #ifndef CX_PLUGIN__CLIPS_PLUGIN_HPP_
   #define CX_PLUGIN__CLIPS_PLUGIN_HPP_
   
   #include <map>
   #include <memory>
   #include <string>
   
   #include "clips_ns/clips.h"
   #include "pluginlib/class_loader.hpp"
   #include "rclcpp_lifecycle/lifecycle_node.hpp"
   
   namespace cx
   {
   
   
   class ClipsPlugin
   {
     friend class ClipsPluginManager;
     using Ptr = pluginlib::UniquePtr<cx::ClipsPlugin>;
   
   public:
     ClipsPlugin();
     virtual ~ClipsPlugin();
   
     virtual void initialize();
     virtual void finalize();
   
   
     virtual bool clips_env_init(std::shared_ptr<clips::Environment> & env) = 0;
   
   
     virtual bool clips_env_destroyed(std::shared_ptr<clips::Environment> & env) = 0;
   
     std::string get_plugin_name() const;
   
   protected:
     std::string plugin_name_;
   
     rclcpp_lifecycle::LifecycleNode::WeakPtr parent_;
   
   private:
     void initialize(
       const rclcpp_lifecycle::LifecycleNode::WeakPtr parent, const std::string & plugin_name);
   };
   
   }  // namespace cx
   
   #endif  // CX_PLUGIN__CLIPS_PLUGIN_HPP_
