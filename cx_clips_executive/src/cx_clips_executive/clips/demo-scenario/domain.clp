;---------------------------------------------------------------------------
;  domain.clp -
;  CX planning instance based on https://github.com/potassco/pddl-instances/blob/master/ipc-2002/domains/rovers-strips-automatic/instances/instance-1.pddl
;---------------------------------------------------------------------------

(defrule load-domain
  (executive-init)
  (not (domain-loaded))
=>
  (parse-pddl-domain (path-resolve "demo-scenario/domain.pddl"))
  (assert (domain-loaded))
)

; (defrule test-domain-set-sensed-predicates
;   (executive-init)
;   (domain-loaded)
;   ?p <- (domain-predicate (name robot_at) (sensed FALSE))
; =>
;   (modify ?p (sensed TRUE))
;)

(defrule load-initial-facts
  (executive-init)
  (domain-loaded)
  =>
  (assert (domain-fact (name visible) (param-values waypoint1 waypoint0)))
  (assert (domain-fact (name visible) (param-values waypoint0 waypoint1)))
  (assert (domain-fact (name visible) (param-values waypoint2 waypoint0)))
  (assert (domain-fact (name visible) (param-values waypoint0 waypoint2)))
  (assert (domain-fact (name visible) (param-values waypoint2 waypoint1)))
  (assert (domain-fact (name visible) (param-values waypoint1 waypoint2)))
  (assert (domain-fact (name visible) (param-values waypoint3 waypoint0)))
  (assert (domain-fact (name visible) (param-values waypoint0 waypoint3)))
  (assert (domain-fact (name visible) (param-values waypoint3 waypoint1)))
  (assert (domain-fact (name visible) (param-values waypoint1 waypoint3)))
  (assert (domain-fact (name visible) (param-values waypoint3 waypoint2)))
  (assert (domain-fact (name visible) (param-values waypoint2 waypoint3)))
  (assert (domain-fact (name at_soil_sample) (param-values waypoint0)))
  (assert (domain-fact (name at_rock_sample) (param-values waypoint1)))
  (assert (domain-fact (name at_soil_sample) (param-values waypoint2)))
  (assert (domain-fact (name at_rock_sample) (param-values waypoint2)))
  (assert (domain-fact (name at_soil_sample) (param-values waypoint3)))
  (assert (domain-fact (name at_rock_sample) (param-values waypoint3)))
  (assert (domain-fact (name at_lander) (param-values general waypoint0)))
  (assert (domain-fact (name channel_free) (param-values general)))
  (assert (domain-fact (name at) (param-values rover0 waypoint3)))
  (assert (domain-fact (name available) (param-values rover0)))
  (assert (domain-fact (name store_of) (param-values rover0store rover0)))
  (assert (domain-fact (name empty) (param-values rover0store)))
  (assert (domain-fact (name equipped_for_soil_analysis) (param-values rover0)))
  (assert (domain-fact (name equipped_for_rock_analysis) (param-values rover0)))
  (assert (domain-fact (name equipped_for_imaging) (param-values rover0)))
  (assert (domain-fact (name can_traverse) (param-values rover0 waypoint3 waypoint0)))
  (assert (domain-fact (name can_traverse) (param-values rover0 waypoint0 waypoint3)))
  (assert (domain-fact (name can_traverse) (param-values rover0 waypoint3 waypoint1)))
  (assert (domain-fact (name can_traverse) (param-values rover0 waypoint1 waypoint3)))
  (assert (domain-fact (name can_traverse) (param-values rover0 waypoint1 waypoint2)))
  (assert (domain-fact (name can_traverse) (param-values rover0 waypoint2 waypoint1)))
  (assert (domain-fact (name on_board) (param-values camera0 rover0)))
  (assert (domain-fact (name calibration_target) (param-values camera0 objective1)))
  (assert (domain-fact (name supports) (param-values camera0 colour)))
  (assert (domain-fact (name supports) (param-values camera0 high_res)))
  (assert (domain-fact (name visible_from) (param-values objective0 waypoint0)))
  (assert (domain-fact (name visible_from) (param-values objective0 waypoint1)))
  (assert (domain-fact (name visible_from) (param-values objective0 waypoint2)))
  (assert (domain-fact (name visible_from) (param-values objective0 waypoint3)))
  (assert (domain-fact (name visible_from) (param-values objective1 waypoint0)))
  (assert (domain-fact (name visible_from) (param-values objective1 waypoint1)))
  (assert (domain-fact (name visible_from) (param-values objective1 waypoint2)))
  (assert (domain-fact (name visible_from) (param-values objective1 waypoint3)))
  (assert
          (domain-object (name general) (type lander))
          (domain-object (name colour) (type mode))
          (domain-object (name high_res) (type mode))
          (domain-object (name low_res) (type mode))
          (domain-object (name rover0) (type rover))
          (domain-object (name rover0store) (type store))
          (domain-object (name waypoint0) (type waypoint))
          (domain-object (name waypoint1) (type waypoint))
          (domain-object (name waypoint2) (type waypoint))
          (domain-object (name waypoint3) (type waypoint))
          (domain-object (name camera0) (type camera))
          (domain-object (name objective0) (type objective))
          (domain-object (name objective1) (type objective))
  )

  (assert (domain-facts-loaded))
)